<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Virtual Coach AI – Upload</title>
  <link rel="stylesheet" href="style.css" />
  <style>
    main { max-width: 860px; margin: 40px auto; padding: 16px; background: rgba(0,0,0,.35); border-radius: 12px; color:#fff; }
    .row { display:flex; gap:10px; align-items:center; flex-wrap:wrap; }
    input[type="file"] { padding:10px; }
    button { padding:10px 14px; border-radius:10px; border:1px solid rgba(255,255,255,.15); background:#0a5f37; color:#fff; cursor:pointer; }
    #status { margin-top:10px; font-weight:600; }
    #debug { margin-top:12px; font-family:ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; font-size:12px; white-space:pre-wrap; background:rgba(0,0,0,.5); padding:10px; border-radius:8px; display:none; }
    video { width:100%; max-height:400px; margin-top:16px; display:none; }
    nav ul { list-style:none; padding:0; display:flex; gap:12px; }
    nav a { color:#fff; text-decoration:none; }
  </style>
</head>
<body>
  <header>
    <nav>
      <ul>
        <li><a href="index.html">Home</a></li>
        <li><a href="about.html">About</a></li>
        <li><a href="coming-soon.html">Coming Soon</a></li>
        <li><a href="contact.html">Contact</a></li>
      </ul>
    </nav>
  </header>

  <main>
    <h1>Upload Your Swing</h1>

    <div class="row">
      <input type="file" id="fileInput" accept="video/*" />
      <button id="uploadBtn">Upload Video</button>
      <button id="showDebug" type="button" style="background:#274a39;">Show Debug</button>
    </div>

    <div id="status"></div>
    <div id="debug"></div>
    <video id="preview" controls></video>
  </main>

  <script>
    const fileInput = document.getElementById('fileInput');
    const statusDiv = document.getElementById('status');
    const debugDiv = document.getElementById('debug');
    const preview = document.getElementById('preview');
    const uploadBtn = document.getElementById('uploadBtn');
    const showDebugBtn = document.getElementById('showDebug');

    const log = (obj, label='') => {
      debugDiv.style.display = 'block';
      debugDiv.textContent += (label ? label + ': ' : '') + (typeof obj === 'string' ? obj : JSON.stringify(obj, null, 2)) + '\n';
    };

    showDebugBtn.addEventListener('click', () => {
      debugDiv.style.display = (debugDiv.style.display === 'none' || !debugDiv.style.display) ? 'block' : 'none';
    });

    fileInput.addEventListener('change', () => {
      const f = fileInput.files[0];
      if (!f) return;
      const url = URL.createObjectURL(f);
      preview.src = url;
      preview.style.display = 'block';
    });

    uploadBtn.addEventListener('click', async () => {
      try {
        const file = fileInput.files[0];
        if (!file) { statusDiv.textContent = "Please select a video file."; return; }

        // 1) PRESIGN (tiny JSON request to your domain)
        statusDiv.textContent = "Requesting upload link…";
        const presignRes = await fetch('/api/s3-presign', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ filename: file.name, contentType: file.type || 'video/quicktime' })
        });

        if (!presignRes.ok) {
          statusDiv.textContent = "Failed to get upload URL.";
          log({status: presignRes.status, text: await presignRes.text()}, 'presign error');
          return;
        }

        const { url, fields, key, publicUrl } = await presignRes.json();
        log({ url, fields, key, publicUrl }, 'presign response');

        // Sanity check: URL MUST be the S3 domain, not your vercel/app domain
        if (!/^https:\/\/[^\/]+\.s3\.[^\/]+\.amazonaws\.com\/?$/.test(url)) {
          statusDiv.textContent = "Bad upload URL (not S3).";
          log(url, 'bad url');
          return;
        }

        // 2) DIRECT POST TO S3 (big file)
        statusDiv.textContent = "Uploading to cloud…";

        const formData = new FormData();
        Object.entries(fields).forEach(([k,v]) => formData.append(k, v));
        formData.append('file', file);

        const s3Res = await fetch(url, { method: 'POST', body: formData });
        const s3Text = await s3Res.text().catch(()=>'');
        log({ status: s3Res.status, body: s3Text.slice(0, 800) }, 's3 response');

        if (!s3Res.ok) {
          statusDiv.textContent = "Upload failed. See debug.";
          return;
        }

        // 3) SUCCESS → stash URL → report.html
        sessionStorage.setItem('uploadedVideoUrl', publicUrl);
        statusDiv.textContent = "Upload complete. Generating report…";
        window.location.href = "report.html";
      } catch (err) {
        console.error(err);
        statusDiv.textContent = "Upload failed. Please try again.";
        log(String(err), 'exception');
      }
    });
  </script>
</body>
</html>
