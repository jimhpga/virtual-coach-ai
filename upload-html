<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Virtual Coach AI – Upload</title>
  <link rel="stylesheet" href="style.css" />
  <style>
    main { max-width: 840px; margin: 40px auto; padding: 16px; background: rgba(0,0,0,.35); border-radius: 12px; }
    .row { display:flex; gap:10px; align-items:center; flex-wrap:wrap; }
    input[type="file"] { padding:10px; }
    button { padding:10px 14px; border-radius:10px; border:1px solid rgba(255,255,255,.15); background:#0a5f37; color:#fff; cursor:pointer; }
    #status { margin-top:10px; font-weight:600; }
    video { width:100%; max-height:400px; margin-top:16px; display:none; }
    /* Hidden iframe target so the page doesn’t navigate to S3 */
    iframe#s3Target { display:none; width:0; height:0; border:0; }
  </style>
</head>
<body>
  <header>
    <nav>
      <ul>
        <li><a href="index.html">Home</a></li>
        <li><a href="about.html">About</a></li>
        <li><a href="coming-soon.html">Coming Soon</a></li>
        <li><a href="contact.html">Contact</a></li>
      </ul>
    </nav>
  </header>

  <main>
    <h1>Upload Your Swing</h1>

    <div class="row">
      <input type="file" id="fileInput" accept="video/*" />
      <button id="uploadBtn">Upload Video</button>
    </div>

    <div id="status"></div>
    <video id="preview" controls></video>

    <!-- Hidden form that will be populated with S3 fields and submitted -->
    <form id="s3Form" method="POST" enctype="multipart/form-data" target="s3Target" style="display:none;">
      <!-- action is set at runtime to the S3 URL -->
      <!-- S3 required fields inserted dynamically as hidden inputs -->
      <input type="file" name="file" id="s3FileInput" />
    </form>

    <!-- Hidden iframe target prevents navigation to S3 -->
    <iframe id="s3Target" name="s3Target"></iframe>
  </main>

  <script>
    const fileInput   = document.getElementById('fileInput');
    const statusDiv   = document.getElementById('status');
    const preview     = document.getElementById('preview');
    const uploadBtn   = document.getElementById('uploadBtn');
    const s3Form      = document.getElementById('s3Form');
    const s3FileInput = document.getElementById('s3FileInput');
    const s3Target    = document.getElementById('s3Target');

    // Show a preview (optional)
    fileInput.addEventListener('change', () => {
      const f = fileInput.files[0];
      if (!f) return;
      const url = URL.createObjectURL(f);
      preview.src = url;
      preview.style.display = 'block';
    });

    // When the hidden iframe finishes loading, assume success if we just posted
    s3Target.addEventListener('load', () => {
      // S3 returns 204 with an empty doc, which still triggers 'load'
      // If we reached here after a submission, move on to the report page
      const publicUrl = sessionStorage.getItem('uploadedVideoUrl');
      if (publicUrl) {
        statusDiv.textContent = "Upload complete. Generating report…";
        window.location.href = "report.html";
      }
    });

    uploadBtn.addEventListener('click', async () => {
      const file = fileInput.files[0];
      if (!file) { statusDiv.textContent = "Please select a video file."; return; }

      statusDiv.textContent = "Requesting upload link…";

      // Ask our API for a presigned POST
      const presignRes = await fetch('/api/s3-presign', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ filename: file.name, contentType: file.type || 'video/quicktime' })
      });

      if (!presignRes.ok) {
        statusDiv.textContent = "Failed to get upload URL.";
        return;
      }

      const { url, fields, key, publicUrl } = await presignRes.json();

      // Remember the public URL for the report page
      sessionStorage.setItem('uploadedVideoUrl', publicUrl);

      // Prepare the hidden form for S3 POST
      s3Form.action = url;

      // Clear previous hidden inputs (if any)
      [...s3Form.querySelectorAll('input[type=hidden]')].forEach(n => n.remove());

      // Insert all S3-required fields as hidden inputs
      Object.entries(fields).forEach(([k, v]) => {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = k;
        input.value = v;
        s3Form.appendChild(input);
      });

      // Put the chosen file into the hidden form's file input
      // Note: We can't programmatically set .files; instead, reuse the visible input via cloning workaround
      // Simpler: temporarily show the hidden file input and assign the same File object by user gesture
      // But to avoid extra clicks, we directly append the visible input into the form, submit, then put it back.

      const visibleParent = fileInput.parentNode;
      const placeholder = document.createElement('span');
      visibleParent.replaceChild(placeholder, fileInput);   // pull out
      fileInput.name = 'file';
      s3Form.appendChild(fileInput);                        // move into form

      statusDiv.textContent = "Uploading to cloud…";

      // Submit to S3 in the hidden iframe
      s3Form.submit();

      // After submit, put the file input back where it was so UI stays normal
      s3Form.removeChild(fileInput);
      fileInput.name = ''; // not needed outside form
      visibleParent.replaceChild(fileInput, placeholder);
    });
  </script>
</body>
</html>
