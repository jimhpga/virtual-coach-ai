// 📁 Filename: diagnostic.js

// Run this script from within the browser console on the upload page
(async function runDiagnostics() {
  const log = (msg) => console.log('%c[DIAG]', 'color: green', msg);
  const error = (msg) => console.error('%c[ERROR]', 'color: red', msg);

  try {
    log('Running Upload Diagnostics...');

    // ✅ 1. Check for file input field
    const fileInput = document.getElementById('fileInput');
    if (!fileInput) return error('Missing #fileInput element');
    log('✔ File input exists.');

    // ✅ 2. Ping /api/analyze with a fake payload
    const response = await fetch('/api/analyze', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ videoUrl: 'https://samplelib.com/lib/preview/mp4/sample-5s.mp4' })
    });

    if (!response.ok) return error(`/api/analyze failed. Status ${response.status}`);
    const json = await response.json();
    if (!json || !json.id || !json.totals) return error('Invalid response structure from /api/analyze');

    log('✔ /api/analyze responded successfully.');
    if (json._saved) {
      log('✔ Data was saved to Supabase successfully.');
    } else {
      error('⚠ Supabase save failed or was not confirmed.');
    }

    // ✅ 3. Display sample output
    console.log('📦 Full API Response:', json);
    log('All systems GO. ✅ Upload pipeline seems functional.');
  } catch (err) {
    error(`Unexpected error: ${err.message}`);
  }
})();
